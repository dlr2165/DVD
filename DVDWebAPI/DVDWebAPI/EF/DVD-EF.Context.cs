//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DVDWebAPI.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=DVDLibraryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Director> Directors { get; set; }
        public virtual DbSet<DVD> DVDs { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
    
        public virtual int sp_DirectorDelete(Nullable<int> directorID)
        {
            var directorIDParameter = directorID.HasValue ?
                new ObjectParameter("directorID", directorID) :
                new ObjectParameter("directorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DirectorDelete", directorIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_DirectorInsert(string firstName, string middleName, string lastName, Nullable<System.DateTime> birthDate, Nullable<System.DateTime> deathDate)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("birthDate", birthDate) :
                new ObjectParameter("birthDate", typeof(System.DateTime));
    
            var deathDateParameter = deathDate.HasValue ?
                new ObjectParameter("deathDate", deathDate) :
                new ObjectParameter("deathDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_DirectorInsert", firstNameParameter, middleNameParameter, lastNameParameter, birthDateParameter, deathDateParameter);
        }
    
        public virtual ObjectResult<sp_DirectorSelect_Result> sp_DirectorSelect(Nullable<int> directorID)
        {
            var directorIDParameter = directorID.HasValue ?
                new ObjectParameter("directorID", directorID) :
                new ObjectParameter("directorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DirectorSelect_Result>("sp_DirectorSelect", directorIDParameter);
        }
    
        public virtual int sp_DirectorUpdate(Nullable<int> directorID, string firstName, string middleName, string lastName, Nullable<System.DateTime> birthDate, Nullable<System.DateTime> deathDate)
        {
            var directorIDParameter = directorID.HasValue ?
                new ObjectParameter("directorID", directorID) :
                new ObjectParameter("directorID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("birthDate", birthDate) :
                new ObjectParameter("birthDate", typeof(System.DateTime));
    
            var deathDateParameter = deathDate.HasValue ?
                new ObjectParameter("deathDate", deathDate) :
                new ObjectParameter("deathDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DirectorUpdate", directorIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, birthDateParameter, deathDateParameter);
        }
    
        public virtual int sp_DVDDelete(Nullable<int> dvdID)
        {
            var dvdIDParameter = dvdID.HasValue ?
                new ObjectParameter("dvdID", dvdID) :
                new ObjectParameter("dvdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DVDDelete", dvdIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_DVDInsert(string title, Nullable<int> releaseYear, Nullable<int> directorID, Nullable<int> ratingID, string notes)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var releaseYearParameter = releaseYear.HasValue ?
                new ObjectParameter("releaseYear", releaseYear) :
                new ObjectParameter("releaseYear", typeof(int));
    
            var directorIDParameter = directorID.HasValue ?
                new ObjectParameter("directorID", directorID) :
                new ObjectParameter("directorID", typeof(int));
    
            var ratingIDParameter = ratingID.HasValue ?
                new ObjectParameter("ratingID", ratingID) :
                new ObjectParameter("ratingID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_DVDInsert", titleParameter, releaseYearParameter, directorIDParameter, ratingIDParameter, notesParameter);
        }
    
        public virtual ObjectResult<sp_DVDSelect_Result> sp_DVDSelect(Nullable<int> dvdID)
        {
            var dvdIDParameter = dvdID.HasValue ?
                new ObjectParameter("dvdID", dvdID) :
                new ObjectParameter("dvdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DVDSelect_Result>("sp_DVDSelect", dvdIDParameter);
        }
    
        public virtual ObjectResult<sp_DVDSelectdetail_Result> sp_DVDSelectdetail(Nullable<int> dvdID)
        {
            var dvdIDParameter = dvdID.HasValue ?
                new ObjectParameter("dvdID", dvdID) :
                new ObjectParameter("dvdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DVDSelectdetail_Result>("sp_DVDSelectdetail", dvdIDParameter);
        }
    
        public virtual int sp_DVDUpdate(Nullable<int> dvdID, string title, Nullable<int> releaseYear, Nullable<int> directorID, Nullable<int> ratingID, string notes)
        {
            var dvdIDParameter = dvdID.HasValue ?
                new ObjectParameter("dvdID", dvdID) :
                new ObjectParameter("dvdID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var releaseYearParameter = releaseYear.HasValue ?
                new ObjectParameter("releaseYear", releaseYear) :
                new ObjectParameter("releaseYear", typeof(int));
    
            var directorIDParameter = directorID.HasValue ?
                new ObjectParameter("directorID", directorID) :
                new ObjectParameter("directorID", typeof(int));
    
            var ratingIDParameter = ratingID.HasValue ?
                new ObjectParameter("ratingID", ratingID) :
                new ObjectParameter("ratingID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DVDUpdate", dvdIDParameter, titleParameter, releaseYearParameter, directorIDParameter, ratingIDParameter, notesParameter);
        }
    
        public virtual int sp_RatingDelete(Nullable<int> ratingID)
        {
            var ratingIDParameter = ratingID.HasValue ?
                new ObjectParameter("ratingID", ratingID) :
                new ObjectParameter("ratingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RatingDelete", ratingIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RatingInsert(string rating)
        {
            var ratingParameter = rating != null ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RatingInsert", ratingParameter);
        }
    
        public virtual ObjectResult<sp_RatingSelect_Result> sp_RatingSelect(Nullable<int> ratingID)
        {
            var ratingIDParameter = ratingID.HasValue ?
                new ObjectParameter("ratingID", ratingID) :
                new ObjectParameter("ratingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RatingSelect_Result>("sp_RatingSelect", ratingIDParameter);
        }
    
        public virtual int sp_RatingUpdate(Nullable<int> ratingID, string rating)
        {
            var ratingIDParameter = ratingID.HasValue ?
                new ObjectParameter("ratingID", ratingID) :
                new ObjectParameter("ratingID", typeof(int));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RatingUpdate", ratingIDParameter, ratingParameter);
        }
    
        public virtual ObjectResult<sp_SelectDVDByDirector_Result> sp_SelectDVDByDirector(string directorName)
        {
            var directorNameParameter = directorName != null ?
                new ObjectParameter("directorName", directorName) :
                new ObjectParameter("directorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDVDByDirector_Result>("sp_SelectDVDByDirector", directorNameParameter);
        }
    
        public virtual ObjectResult<sp_SelectDVDByID_Result> sp_SelectDVDByID(Nullable<int> dvdID)
        {
            var dvdIDParameter = dvdID.HasValue ?
                new ObjectParameter("dvdID", dvdID) :
                new ObjectParameter("dvdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDVDByID_Result>("sp_SelectDVDByID", dvdIDParameter);
        }
    
        public virtual ObjectResult<sp_SelectDVDByRating_Result> sp_SelectDVDByRating(string rating)
        {
            var ratingParameter = rating != null ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDVDByRating_Result>("sp_SelectDVDByRating", ratingParameter);
        }
    
        public virtual ObjectResult<sp_SelectDVDByTitle_Result> sp_SelectDVDByTitle(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDVDByTitle_Result>("sp_SelectDVDByTitle", titleParameter);
        }
    
        public virtual ObjectResult<sp_SelectDVDByYear_Result> sp_SelectDVDByYear(Nullable<int> releaseYear)
        {
            var releaseYearParameter = releaseYear.HasValue ?
                new ObjectParameter("releaseYear", releaseYear) :
                new ObjectParameter("releaseYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectDVDByYear_Result>("sp_SelectDVDByYear", releaseYearParameter);
        }
    }
}
